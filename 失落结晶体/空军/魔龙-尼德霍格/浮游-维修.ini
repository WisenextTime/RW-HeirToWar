[core]
name: 浮游-维修
class: CustomUnitMetadata
price: 0
maxHp:120
mass:600
#overrideAndReplace: builder
displayDescription:-有维修效果的浮游单位
techLevel: 1
buildSpeed: 3.3s
availableInDemo: false
ignoreInUnitCapCalculation:true
showInEditor:false
showOnMinimap:false
tags:侵染,浮游,维修
isBio: false
radius: 7
displayRadius: 7
softCollisionOnAll: 3
numBitsOnDeath:0
explodeOnDeath:false
#effectOnDeath: CUSTOM:lightningShock*2
explodeOnDeathGroundCollosion:false
canNotBeGivenOrdersByPlayer:true
canRepairBuildings: true
canRepairUnits : true
nanoRange: 115
nanoBuildSpeed: 2
autoRepair:true
nanoRepairSpeed: 0.6
canReclaimResources: true
isBuilder: true
@memory A :unit
[graphics]
image:        浮游-维修.png
image_wreak:  NONE
image_turret: NONE
#scaleImagesTo: 20
#scaleTurretImagesTo: 9

imageScale:0.5
turretImageScale:0.7
lock_body_rotation_with_main_turret: true
#AUTO
image_shadow: AUTO
shadowOffsetX:1
shadowOffsetY:1

[attack]

canAttack: true
canAttackFlyingUnits: false
canAttackLandUnits:   false
canAttackUnderwaterUnits: false

turretSize:0
turretTurnSpeed: 3

maxAttackRange: 115
shootDelay: 50


[turret_Repair]
#nano turret (nano must be slot 1)
x: 0
y: 10
invisible: true
warmup:30

canShoot: false
canAttackFlyingUnits: false
canAttackLandUnits:   false
canAttackUnderwaterUnits: false

attachedTo:main
slave: true

[turret_main]
x:0
y:0
invisible: true

[projectile_1]
directDamage: 45
life: 70
speed: 7
frame: 11


[movement]
movementType: AIR

targetHeight: 17
targetHeightDrift: 1

reverseSpeedPercentage: 0.6

moveSpeed: 3
moveAccelerationSpeed: 0.02
moveDecelerationSpeed: 0.06


#body_rotation_with_main_turret means this is not used
maxTurnSpeed: 99
turnAcceleration: 99


moveSlidingMode :true
moveIgnoringBody:true
moveSlidingDir:  181



slowDeathFall: true
slowDeathFallSmoke: false



[ai]
useAsBuilder: true

[hiddenAction_清理]
autoTrigger:if self.customTarget1 == nullUnit
deleteSelf:true
[hiddenAction_维修挂钩]
autoTrigger:if self.parent == nullUnit and self.customTarget1.customTarget1.hasActiveWaypoint(type='repair')
sendMessageTo:self.customTarget1
sendMessageWithTags:维修挂钩
sendMessageWithData:Target=self
[hiddenAction_维修路径]
autoTriggerOnEvent:newMessage(withTag='维修')
clearAllWaypoints:true
addWaypoint_type:repair
addWaypoint_triggerActionIfFailed:归巢
addWaypoint_maxTime:10s
addWaypoint_target_fromReference:self.customTarget1.customTarget1.activeWaypointTarget

[hiddenAction_回收挂钩]
autoTrigger:if self.parent == nullUnit and self.customTarget1.customTarget1.hasActiveWaypoint(type='reclaim')
sendMessageTo:self.customTarget1
sendMessageWithTags:回收挂钩
sendMessageWithData:Target=self
[hiddenAction_回收路径]
autoTriggerOnEvent:newMessage(withTag='回收')
clearAllWaypoints:true
addWaypoint_type:reclaim
addWaypoint_triggerActionIfFailed:归巢
addWaypoint_maxTime:10s
addWaypoint_target_fromReference:self.customTarget1.customTarget1.activeWaypointTarget
#setUnitMemory:A=self.customTarget1.customTarget1.activeWaypointTarget.getAsMarker.nearestUnit
[hiddenAction_归巢]
autoTrigger:if not self.customTarget1.customTarget1.hasActiveWaypoint(type='repair') and not self.customTarget1.customTarget1.hasActiveWaypoint(type='reclaim')
clearAllWaypoints:true
addWaypoint_type:loadInto
addWaypoint_maxTime:10s
addWaypoint_target_fromReference:self.customTarget1
[hiddenAction_补充]
autoTriggerOnEvent:destroyed
sendMessageTo:self.customTarget1
sendMessageWithTags:补充

[hiddenAction_正常获得经验]
sendMessageTo:customTarget1.customTarget1
sendMessageWithTags:exp
sendMessageWithData:exp=eventData('exp',type='float'),Rexp=eventData('exp',type='float')

[hiddenAction_同步等级]
autoTriggerOnEvent:created
setResourcesWithLogic:level=customTarget1.resource.level